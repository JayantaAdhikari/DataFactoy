{
	"name": "dataflow_customer",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source_PurchaseOrder",
						"type": "DatasetReference"
					},
					"name": "PurchaseOrder"
				},
				{
					"dataset": {
						"referenceName": "ds_source_Customer",
						"type": "DatasetReference"
					},
					"name": "Customer"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CustomerPurchase",
						"type": "DatasetReference"
					},
					"name": "output"
				}
			],
			"transformations": [
				{
					"name": "PurchaseOrderSelection"
				},
				{
					"name": "Customerselection"
				},
				{
					"name": "DataQualityFilter"
				},
				{
					"name": "JoinStream"
				},
				{
					"name": "CustomerPurchase"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PurchaseOrderID as string,",
				"          CustomerCode as string,",
				"          ProductCode as string,",
				"          EmployeeCode as string,",
				"          PurchaseOrderDate as string,",
				"          Quantity as long,",
				"          UnitPrice as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PurchaseOrder",
				"source(output(",
				"          CustomerCode as string,",
				"          { CustomerName} as string,",
				"          { Address} as string,",
				"          { PhoneNumber} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Customer",
				"PurchaseOrder select(mapColumn(",
				"          CustomerCode,",
				"          Quantity",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PurchaseOrderSelection",
				"Customer select(mapColumn(",
				"          CustomerCode,",
				"          { CustomerName}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Customerselection",
				"PurchaseOrderSelection filter(greater(Quantity, 0)) ~> DataQualityFilter",
				"DataQualityFilter, Customerselection join(PurchaseOrderSelection@CustomerCode == Customerselection@CustomerCode,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinStream",
				"JoinStream aggregate(groupBy(Customerselection@CustomerCode,",
				"          { CustomerName}),",
				"     PurchaseOrder = sum(Quantity)) ~> CustomerPurchase",
				"CustomerPurchase sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PurchaseOrderID as string,",
				"          CustomerCode as string,",
				"          ProductCode as string,",
				"          EmployeeCode as string,",
				"          PurchaseOrderDate as string,",
				"          Quantity as string,",
				"          UnitPrice as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> output"
			]
		}
	}
}